---
- name: Gather Route53 zone facts
  route53_facts:
    query: hosted_zone
  register: r53_zones

#- name: Filter Route53 zones
#  set_fact:
#    r53_zoness: ['
#      {% for zone in r53_zones.HostedZones -%}
#          {%- if zone.Config.PrivateZone == true -%}
#            { "Id": "{{ zone.Id }}", "Name": "{{ zone.Name }}", "PrivateZone": true },
#          {%- else -%}
#            { "Id": "{{ zone.Id }}", "Name": "{{ zone.Name }}" , "PrivateZone": false },
#          {%- endif -%}
#      {% endfor -%}']
  #register: r53_zoness

- debug: 
    msg: "PRIV {{ item.Config.PrivateZone }}"
  loop: "{{ r53_zones.HostedZones }}"

- name: Gather Route53 record facts
  ignore_errors: True
  route53:
    command: get
    private_zone: "{{ item.private_zone }}"
    record: "{{ item.record }}"
    type: CNAME
    zone: "{{ item.zone }}"
  register: r53_record
  with_items:
    - private_zone: no
      #record: "{{ 'master' + '.' + clusterid + '.' + dns_domain }}"
      record: "{{ master_lb_dns }}"
      type: 'CNAME'
      #zone: "{{ clusterid + '.' + dns_domain }}."
      zone: "{{ dns_domain }}."
    - private_zone: no
      #record: "*.apps.{{ clusterid }}.{{ dns_domain }}"
      record: "*.{{ router_lb_default_subdomain }}"
      type: 'CNAME'
      #zone: "{{ clusterid + '.' + dns_domain }}."
      zone: "{{ dns_domain }}."
    - private_zone: yes
      record: "{{ master_lb_dns }}"
      #record: "{{ 'master' + '.' + clusterid + '.' + dns_domain }}"
      #zone: "{{ clusterid + '.' + dns_domain }}."
      zone: "{{ dns_domain }}."
    - private_zone: yes
      #record: "*.apps.{{ clusterid }}.{{ dns_domain }}"
      record: "*.{{ router_lb_default_subdomain }}"
      type: 'CNAME'
      #zone: "{{ clusterid + '.' + dns_domain }}."
      zone: "{{ dns_domain }}."
  changed_when: "( r53_record.msg is defined ) and ( 'filler msg to prevent changed task' in r53_record.msg )"
  failed_when: "( r53_record.msg is defined ) and ( 'filler msg to prevent failed task' in r53_record.msg )"

- name: Gather Route53 record facts for masters private addresses
  ignore_errors: True
  route53:
    command: get
    private_zone: yes
    record: "master{{ item }}.{{ clusterid }}.{{ dns_domain }}"
    type: CNAME
    zone: "{{ dns_domain }}"
  register: r53_masters_record
  loop: "{{ lookup('sequence', 'start=1 end={{ ec2_count_master|default(3) }}', wantlist=True )  }}"
  changed_when: "( r53_masters_record.msg is defined ) and ( 'filler msg to prevent changed task' in r53_masters_record.msg )"
  failed_when: "( r53_masters_record.msg is defined ) and ( 'filler msg to prevent failed task' in r53_masters_record.msg )"

- name: Gather Route53 record facts for infras private addresses
  ignore_errors: True
  route53:
    command: get
    private_zone: yes
    record: "infra{{ item }}.{{ clusterid }}.{{ dns_domain }}"
    type: CNAME
    zone: "{{ dns_domain }}"
  register: r53_infras_record
  loop: "{{ lookup('sequence', 'start=1 end={{ ec2_count_infra|default(3) }}', wantlist=True )  }}"
  changed_when: "( r53_infras_record.msg is defined ) and ( 'filler msg to prevent changed task' in r53_infras_record.msg )"
  failed_when: "( r53_infras_record.msg is defined ) and ( 'filler msg to prevent failed task' in r53_infras_record.msg )"

- name: Gather Route53 record facts for nodes private addresses
  ignore_errors: True
  route53:
    command: get
    private_zone: yes
    record: "node{{ item }}.{{ clusterid }}.{{ dns_domain }}"
    type: CNAME
    zone: "{{ dns_domain }}"
  register: r53_nodes_record
  loop: "{{ lookup('sequence', 'start=1 end={{ ec2_count_node|default(3) }}', wantlist=True )  }}"
  changed_when: "( r53_nodes_record.msg is defined ) and ( 'filler msg to prevent changed task' in r53_nodes_record.msg )"
  failed_when: "( r53_nodes_record.msg is defined ) and ( 'filler msg to prevent failed task' in r53_nodes_record.msg )"

- name: Gather VPC facts
  ec2_vpc_net_facts:
    filters:
      tag:Name: "{{ clusterid }}"
    region: "{{ aws_region }}"
  register: vpc
- debug: var=vpc
- name: Gather NatGW facts
  ec2_vpc_nat_gateway_facts:
    filters: "{{ {
      'tag:kubernetes.io/cluster/' ~ clusterid: clusterid,
      'tag:clusterid': clusterid,
      'state': 'available'
    } }}"
    region: "{{ aws_region }}"
  register: natgws
